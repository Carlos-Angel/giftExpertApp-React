{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","hooks/useFetchGifts.js","components/GifGridItem.js","components/GifGrid.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categories","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifts","map","img","id","title","images","downsized_medium","console","log","useFetchGifts","loading","state","setState","useEffect","then","GifGridItem","className","src","alt","GifGrid","image","key","GifExpertApp","ReactDOM","render","document","getElementById"],"mappings":"qMA8BeA,EA3BK,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAEHC,mBAAS,IAFN,mBAEhCC,EAFgC,KAEpBC,EAFoB,KAgBvC,OACE,0BAAMC,SATa,SAACC,GACpBA,EAAEC,iBACCJ,EAAWK,OAAOC,OAAS,IAC5BR,GAAe,SAAAS,GAAU,OAAKP,GAAL,mBAAmBO,OAC5CN,EAAc,OAMd,2BAAOO,KAAK,OAAOC,MAAOT,EAAYU,SAdhB,SAACP,GACzBF,EAAcE,EAAEQ,OAAOF,Y,uBCRdG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACfC,EADe,iDACiCC,UAAUH,GAD3C,+DAEFI,MAAMF,GAFJ,cAEfG,EAFe,gBAGAA,EAAKC,OAHL,uBAGdC,EAHc,EAGdA,KAEDC,EAAQD,EAAKE,KAAI,SAACC,GAAO,IAAD,EAC5B,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAItCa,QAAQC,IAAId,GAbS,kBAcdM,GAdc,4CAAH,sDCqBLS,MAlBf,SAAuBjB,GAAW,IAAD,EACLd,mBAAS,CAACqB,KAAM,GAAIW,SAAQ,IADvB,mBACxBC,EADwB,KACjBC,EADiB,KAe/B,OAZAC,qBAAU,WACRtB,EAAQC,GAAUsB,MAAM,SAAAT,GAEtBO,EAAS,CACPb,KAAKM,EACLK,SAAQ,SAKZ,CAAClB,IAEImB,GCPMI,MATf,YAAuC,EAAjBZ,GAAkB,IAAdC,EAAa,EAAbA,MAAOV,EAAM,EAANA,IAC/B,OACE,yBAAKsB,UAAU,0CACb,yBAAKC,IAAKvB,EAAKwB,IAAKd,IACpB,2BAAIA,KCeKe,MAjBf,YAA8B,IAAZ3B,EAAW,EAAXA,SAAW,EAEIiB,EAAcjB,GAAjCa,EAFe,EAEpBN,KAAaW,EAFO,EAEPA,QAEpB,OACI,oCACE,wBAAIM,UAAU,qCAAqCxB,GAClDkB,GAAW,uBAAGM,UAAU,oCAAb,eACZ,yBAAKA,UAAU,aACZX,EAAOJ,KAAI,SAACmB,GACX,OAAO,kBAAC,EAAD,eAAaC,IAAKD,EAAMjB,IAAQiB,UCUpCE,EAnBM,WAAK,IAAD,EAEa5C,mBAAS,CAAC,cAFvB,mBAEhBQ,EAFgB,KAEJT,EAFI,KAIvB,OACE,oCACE,4CACA,kBAAC,EAAD,CAAaA,cAAeA,IAC5B,6BAEA,4BACIS,EAAWe,KAAK,SAAAT,GAChB,OAAO,kBAAC,EAAD,CAAS6B,IAAK7B,EAAUA,SAAUA,U,MCZnD+B,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,U","file":"static/js/main.6b020c06.chunk.js","sourcesContent":["import React, {useState} from 'react'\nimport PropTypes from \"prop-types\";\n\nconst AddCategory = ({setCategories}) => {\n\n  const [inputValue, setInputValue] = useState(\"\");\n\n  const handleInputChange = (e)=>{\n    setInputValue(e.target.value);\n  }\n\n  const handleSubmit = (e)=>{\n    e.preventDefault();\n    if(inputValue.trim().length > 2){\n      setCategories( categories => [inputValue,...categories] );\n      setInputValue(\"\");\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input type=\"text\" value={inputValue} onChange={handleInputChange}/>\n    </form>\n  )\n};\n\nAddCategory.propTypes = {\n  setCategories: PropTypes.func.isRequired,\n};\n\nexport default AddCategory;\n","export const getGifs = async( category )=>{\n  const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=JCOveKKITawABOFfhUW3OLfm9dwgg62e`;\n  const resp = await fetch(url);\n  const {data} = await resp.json();\n\n  const gifts = data.map((img)=>{\n    return {\n      id: img.id,\n      title: img.title,\n      url: img.images?.downsized_medium.url,\n    }\n  });\n\n  console.log(url);\n  return gifts;\n}","import { useState, useEffect } from \"react\"\nimport { getGifs } from \"../helpers/getGifs\";\n\nfunction useFetchGifts(category) {\n  const [state, setState] = useState({data: [], loading:true});\n\n  useEffect(()=>{\n    getGifs(category).then( images => {\n\n      setState({\n        data:images,\n        loading:false\n      });\n\n    }\n    );\n  },[category]);\n\n  return state;\n}\n\nexport default useFetchGifts\n","import React from 'react'\n\nfunction GifGridItem({id, title, url}) {\n  return (\n    <div className=\"card animate__animated animate__fadeIn\">\n      <img src={url} alt={title} />\n      <p>{title}</p>\n    </div>\n  )\n}\n\nexport default GifGridItem\n","import React from 'react'\nimport useFetchGifts from '../hooks/useFetchGifts';\nimport GifGridItem from './GifGridItem';\n\nfunction GifGrid({category}) {\n\n  const {data:images ,loading} = useFetchGifts(category);\n\n  return (\n      <>\n        <h3 className=\"animate__animated animate__fadeIn\">{category}</h3>\n        {loading && <p className=\"animate__animated animate__flash\">Cargando...</p>}\n        <div className=\"card-grid\">\n          {images.map((image)=>{\n            return <GifGridItem key={image.id} {...image} />\n          })}\n        </div>\n      </>\n  )\n};\n\nexport default GifGrid;\n","import React, {useState} from 'react';\nimport AddCategory from './components/AddCategory';\nimport GifGrid from './components/GifGrid';\n\n\nconst GifExpertApp = ()=>{\n\n  const [categories, setCategories] = useState([\"One Punch\"]);\n\n  return (\n    <>\n      <h2>GifExpertApp</h2>\n      <AddCategory setCategories={setCategories} />\n      <hr/>\n\n      <ul>\n        { categories.map( category => {\n          return <GifGrid key={category} category={category} />\n        })}\n      </ul>\n    </>\n  );\n};\n\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);"],"sourceRoot":""}